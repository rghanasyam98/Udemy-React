{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\routing3\\\\12-adv-starting-project\\\\frontend\\\\src\\\\App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport HomePage from './pages/Home';\nimport EventsPage, { EventsLoader } from './pages/Events';\nimport EventDetailPage, { eventDetailLoader, action as eventDeleteAction } from './pages/EventDetail';\nimport NewEventPage from './pages/NewEvent';\nimport EditEventPage from './pages/EditEvent';\nimport RootLayout from './pages/Root';\nimport { Children } from 'react';\nimport EventRoot from './pages/EventRoot';\nimport ErrorPage from './pages/ErrorPage';\nimport { action as newOReditEventaction } from './components/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 13\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 18\n  }, this),\n  //if knowinly or unknowingly throws an error this will be rendered\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 28\n    }, this)\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventRoot, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 31\n      }, this),\n      loader: EventsLoader\n    },\n    //EventsLoader is actually defined in  <EventsPage/>\n    {\n      path: ':eventId',\n      loader: eventDetailLoader,\n      //this loader is know accessible to all the children of this route with useRouteLoaderData() hook not with useLoaderData()\n      id: 'event-detail',\n      //to access loader returned data we need this id since mulpile route access\n      children: [{\n        index: true,\n        path: '',\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 44\n        }, this),\n        action: eventDeleteAction\n      }, {\n        path: 'edit',\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 36\n        }, this),\n        action\n      }]\n    },\n    // if a form is submitted in NewEventPage then newEventAction will be called\n    {\n      path: 'new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 31\n      }, this),\n      action: newOReditEventaction\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","HomePage","EventsPage","EventsLoader","EventDetailPage","eventDetailLoader","action","eventDeleteAction","NewEventPage","EditEventPage","RootLayout","Children","EventRoot","ErrorPage","newOReditEventaction","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","index","loader","id","App","_c","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/routing3/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\n\nimport {createBrowserRouter,RouterProvider} from 'react-router-dom';\nimport HomePage from './pages/Home';\nimport EventsPage,{EventsLoader} from './pages/Events';\nimport EventDetailPage, { eventDetailLoader,action as eventDeleteAction } from './pages/EventDetail';\nimport NewEventPage from './pages/NewEvent';\nimport EditEventPage from './pages/EditEvent';\nimport RootLayout from './pages/Root';\nimport { Children } from 'react';\nimport EventRoot from './pages/EventRoot';\nimport ErrorPage from './pages/ErrorPage';\nimport { action as newOReditEventaction } from './components/EventForm';\n\nconst router=createBrowserRouter([\n  {\n    path:'/',\n    element:<RootLayout/>,\n    errorElement:<ErrorPage/>,//if knowinly or unknowingly throws an error this will be rendered\n    children:[\n      {index:true, element:<HomePage/>},\n      {\n        path:'events',\n        element:<EventRoot/>,\n        children:[\n          {index:true,element:<EventsPage/>,loader:EventsLoader },//EventsLoader is actually defined in  <EventsPage/>\n          {\n            path:':eventId',\n            loader:eventDetailLoader,//this loader is know accessible to all the children of this route with useRouteLoaderData() hook not with useLoaderData()\n            id:'event-detail',//to access loader returned data we need this id since mulpile route access\n            children:[\n              {index:true, path:'',element:<EventDetailPage/>,action:eventDeleteAction},\n              {path:'edit',element:<EditEventPage/> , action},\n            ]\n           \n          },\n          // if a form is submitted in NewEventPage then newEventAction will be called\n          {path:'new',element:<NewEventPage/>, action:newOReditEventaction },\n         \n             \n        ]\n      },\n      \n    ]\n  },\n  \n])\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}