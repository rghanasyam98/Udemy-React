{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\routing3\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useParams, useLoaderData, useRouteLoaderData, json } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const params = useParams();\n  // useLoaderData is used if only one route access returned data if multiple routes we neeed useRouteLoaderData\n  // const data=useLoaderData();\n\n  // for multiple route access we need to use useRouteLoaderData and to specify the id mentioned in route definitions\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(EventDetailPage, \"4wV/h3ufdtqA8xf4Dnjmg0exre8=\", false, function () {\n  return [useParams, useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\n\n// loader function for the case of dynamic detail view with an id in the url\nexport async function eventDetailLoader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      status: 500,\n      message: \"error fetching event\"\n    });\n  } else {\n    return response;\n  }\n}\nexport async function action({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw json({\n      status: 500,\n      message: \"error fetching event\"\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","useLoaderData","useRouteLoaderData","json","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","params","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","eventDetailLoader","request","id","eventId","response","fetch","ok","status","message","action","method","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/routing3/12-adv-starting-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useParams,useLoaderData, useRouteLoaderData, json } from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\nconst EventDetailPage=()=>{\r\n    const params=useParams();\r\n      // useLoaderData is used if only one route access returned data if multiple routes we neeed useRouteLoaderData\r\n    // const data=useLoaderData();\r\n\r\n    // for multiple route access we need to use useRouteLoaderData and to specify the id mentioned in route definitions\r\n    const data=useRouteLoaderData('event-detail');\r\n\r\n    return(\r\n        <>    \r\n        <EventItem event={data.event} />\r\n        {/* <h1>EventDetailPage</h1>\r\n        <p>Event ID:{params.eventId}</p> */}\r\n        </>\r\n    \r\n    );\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\n// loader function for the case of dynamic detail view with an id in the url\r\nexport async function eventDetailLoader({request,params}){\r\n    const id=params.eventId;\r\n    const response=await fetch('http://localhost:8080/events/'+id);\r\n    if(!response.ok){\r\n        throw json({\r\n            status:500,\r\n            message:\"error fetching event\"\r\n        })\r\n    }\r\n    else{\r\n        return response;\r\n    }\r\n}\r\n\r\nexport async function action({request,params}){\r\n    const id=params.eventId;\r\n    const response=await fetch('http://localhost:8080/events/'+id,{\r\n        method:'DELETE',\r\n    });\r\n    if(!response.ok){\r\n        throw json({\r\n            status:500,\r\n            message:\"error fetching event\"\r\n        })\r\n    }\r\n    else{\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAACC,aAAa,EAAEC,kBAAkB,EAAEC,IAAI,QAAQ,kBAAkB;AACpF,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,eAAe,GAACA,CAAA,KAAI;EAAAC,EAAA;EACtB,MAAMC,MAAM,GAACX,SAAS,CAAC,CAAC;EACtB;EACF;;EAEA;EACA,MAAMY,IAAI,GAACV,kBAAkB,CAAC,cAAc,CAAC;EAE7C,oBACII,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACAP,OAAA,CAACF,SAAS;MAACU,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAG9B,CAAC;AAGX,CAAC;AAAAR,EAAA,CAhBKD,eAAe;EAAA,QACJT,SAAS,EAKXE,kBAAkB;AAAA;AAAAiB,EAAA,GAN3BV,eAAe;AAkBrB,eAAeA,eAAe;;AAE9B;AACA,OAAO,eAAeW,iBAAiBA,CAAC;EAACC,OAAO;EAACV;AAAM,CAAC,EAAC;EACrD,MAAMW,EAAE,GAACX,MAAM,CAACY,OAAO;EACvB,MAAMC,QAAQ,GAAC,MAAMC,KAAK,CAAC,+BAA+B,GAACH,EAAE,CAAC;EAC9D,IAAG,CAACE,QAAQ,CAACE,EAAE,EAAC;IACZ,MAAMvB,IAAI,CAAC;MACPwB,MAAM,EAAC,GAAG;MACVC,OAAO,EAAC;IACZ,CAAC,CAAC;EACN,CAAC,MACG;IACA,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,eAAeK,MAAMA,CAAC;EAACR,OAAO;EAACV;AAAM,CAAC,EAAC;EAC1C,MAAMW,EAAE,GAACX,MAAM,CAACY,OAAO;EACvB,MAAMC,QAAQ,GAAC,MAAMC,KAAK,CAAC,+BAA+B,GAACH,EAAE,EAAC;IAC1DQ,MAAM,EAAC;EACX,CAAC,CAAC;EACF,IAAG,CAACN,QAAQ,CAACE,EAAE,EAAC;IACZ,MAAMvB,IAAI,CAAC;MACPwB,MAAM,EAAC,GAAG;MACVC,OAAO,EAAC;IACZ,CAAC,CAAC;EACN,CAAC,MACG;IACA,OAAOJ,QAAQ;EACnB;AACJ;AAAC,IAAAL,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}