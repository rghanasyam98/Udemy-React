{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\routing3\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport EventsList from '../components/EventsList';\nimport { useLoaderData } from 'react-router-dom';\n\n// Utilizing router specific loader and useLoaderData for http\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  // in case of returned the json parsed events\n  // const events=useLoaderData();\n\n  // loader feature automatically parse json we dont have to\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 8\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n\n// the loader fn can be placed here and a pointer can be used at loader :\nexport const EventsLoader = async () => {\n  //loader defines the action to be performed before rendering eventspage\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //dealing error\n    return {\n      isError: true,\n      message: ''\n    };\n  } else {\n    //  const resData = await response.json();\n    //  return resData.events;\n\n    // in case of using loader we only need to return response . the json parsing is done by useLoaderData automatically\n    return response;\n  }\n};\n\n// normal method of loading a  component AND fetching hhtp with useEffect \n\n// function EventsPage() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [fetchedEvents, setFetchedEvents] = useState();\n//   const [error, setError] = useState();\n\n//   useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n//       const response = await fetch('http://localhost:8080/events');\n\n//       if (!response.ok) {\n//         setError('Fetching events failed.');\n//       } else {\n//         const resData = await response.json();\n//         setFetchedEvents(resData.events);\n//       }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\n//   return (\n//     <>\n//       <div style={{ textAlign: 'center' }}>\n//         {isLoading && <p>Loading...</p>}\n//         {error && <p>{error}</p>}\n//       </div>\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n//     </>\n//   );\n// }\n\n// export default EventsPage;\n_c2 = EventsLoader;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventsPage\");\n$RefreshReg$(_c2, \"EventsLoader\");","map":{"version":3,"names":["useEffect","useState","EventsList","useLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","EventsLoader","response","fetch","ok","isError","message","_c2","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/routing3/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport EventsList from '../components/EventsList';\r\nimport { useLoaderData } from 'react-router-dom';\r\n\r\n// Utilizing router specific loader and useLoaderData for http\r\nfunction EventsPage() {\r\n \r\n  // in case of returned the json parsed events\r\n  // const events=useLoaderData();\r\n\r\n  // loader feature automatically parse json we dont have to\r\n  const data=useLoaderData();\r\n  const events=data.events;\r\n  \r\n    return (\r\n  \r\n        \r\n       <EventsList events={events} />\r\n \r\n    );\r\n  }\r\n  \r\n  export default EventsPage;\r\n\r\n// the loader fn can be placed here and a pointer can be used at loader :\r\nexport const EventsLoader=async()=>{\r\n    //loader defines the action to be performed before rendering eventspage\r\n        const response = await fetch('http://localhost:8080/events');\r\n\r\n        if (!response.ok) {\r\n         //dealing error\r\n         return {isError: true,message:''}\r\n       } else {\r\n        //  const resData = await response.json();\r\n        //  return resData.events;\r\n\r\n        // in case of using loader we only need to return response . the json parsing is done by useLoaderData automatically\r\n        return response;\r\n         }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// normal method of loading a  component AND fetching hhtp with useEffect \r\n\r\n// function EventsPage() {\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [fetchedEvents, setFetchedEvents] = useState();\r\n//   const [error, setError] = useState();\r\n\r\n//   useEffect(() => {\r\n//     async function fetchEvents() {\r\n//       setIsLoading(true);\r\n//       const response = await fetch('http://localhost:8080/events');\r\n\r\n//       if (!response.ok) {\r\n//         setError('Fetching events failed.');\r\n//       } else {\r\n//         const resData = await response.json();\r\n//         setFetchedEvents(resData.events);\r\n//       }\r\n//       setIsLoading(false);\r\n//     }\r\n\r\n//     fetchEvents();\r\n//   }, []);\r\n//   return (\r\n//     <>\r\n//       <div style={{ textAlign: 'center' }}>\r\n//         {isLoading && <p>Loading...</p>}\r\n//         {error && <p>{error}</p>}\r\n//       </div>\r\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default EventsPage;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEpB;EACA;;EAEA;EACA,MAAMC,IAAI,GAACL,aAAa,CAAC,CAAC;EAC1B,MAAMM,MAAM,GAACD,IAAI,CAACC,MAAM;EAEtB,oBAGGJ,OAAA,CAACH,UAAU;IAACO,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAGnC;AAACN,EAAA,CAfMD,UAAU;EAAA,QAMNH,aAAa;AAAA;AAAAW,EAAA,GANjBR,UAAU;AAiBjB,eAAeA,UAAU;;AAE3B;AACA,OAAO,MAAMS,YAAY,GAAC,MAAAA,CAAA,KAAS;EAC/B;EACI,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACjB;IACA,OAAO;MAACC,OAAO,EAAE,IAAI;MAACC,OAAO,EAAC;IAAE,CAAC;EACnC,CAAC,MAAM;IACN;IACA;;IAEA;IACA,OAAOJ,QAAQ;EACd;AAET,CAAC;;AAcD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAK,GAAA,GA/DaN,YAAY;AAAA,IAAAD,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}