{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\routing3\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEvent.js\";\nimport { json, redirect } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  return /*#__PURE__*/_jsxDEV(EventForm, {\n    method: post\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 8\n  }, this);\n};\n_c = NewEventPage;\nexport default NewEventPage;\n\n// defining an action fn to be performed on form submit\nexport async function action({\n  request,\n  params\n}) {\n  // entered data in form will be available in request since we used <Form> instead of <form>\n  const data = await request.formData();\n  // extracting individual fields from with name property\n  const eventadata = {\n    title: data.get('title'),\n    date: data.get('date'),\n    description: data.get('description'),\n    image: data.get('image')\n  };\n  console.log(eventadata);\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventadata)\n  });\n\n  // backend validates the code and report errors\n  // in the case we need to indicate what are errors in the screen\n  // response contains list of errors\n  if (response.status === 422) {\n    return response;\n  }\n  if (!response.ok) {\n    // if failed to submit data then throw an error to render error page\n    throw json({\n      status: 500,\n      message: 'unable to submit event'\n    });\n  } else {\n    // useNavigate hook cant be used inside action\n    // so another method redirect is used\n    return redirect('/events');\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","redirect","EventForm","jsxDEV","_jsxDEV","NewEventPage","method","post","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","data","formData","eventadata","title","get","date","description","image","console","log","response","fetch","headers","body","JSON","stringify","status","ok","message","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/routing3/12-adv-starting-project/frontend/src/pages/NewEvent.js"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\r\nimport EventForm from \"../components/EventForm\";\r\n\r\n\r\nconst NewEventPage=()=>{\r\n    return(\r\n       <EventForm method={post} />\r\n    );\r\n}\r\n\r\nexport default NewEventPage;\r\n\r\n\r\n// defining an action fn to be performed on form submit\r\nexport async function action({request,params}){\r\n    // entered data in form will be available in request since we used <Form> instead of <form>\r\n    const data=await request.formData();\r\n    // extracting individual fields from with name property\r\n    const eventadata={\r\n        title:data.get('title'),\r\n        date:data.get('date'),\r\n        description:data.get('description'),\r\n        image:data.get('image')\r\n    };\r\n    console.log(eventadata);\r\n\r\n    const response=await fetch('http://localhost:8080/events',{\r\n        method: 'POST',\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(eventadata)\r\n    });\r\n\r\n\r\n    // backend validates the code and report errors\r\n    // in the case we need to indicate what are errors in the screen\r\n    // response contains list of errors\r\n      if(response.status === 422){\r\n        return response;\r\n      }\r\n\r\n    if(!response.ok){\r\n        // if failed to submit data then throw an error to render error page\r\n        throw json({\r\n            status:500,\r\n            message:'unable to submit event'\r\n        })\r\n    }\r\n    else{\r\n        // useNavigate hook cant be used inside action\r\n        // so another method redirect is used\r\n       return redirect('/events');\r\n    }\r\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,MAAMC,YAAY,GAACA,CAAA,KAAI;EACnB,oBACGD,OAAA,CAACF,SAAS;IAACI,MAAM,EAAEC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAElC,CAAC;AAAAC,EAAA,GAJKP,YAAY;AAMlB,eAAeA,YAAY;;AAG3B;AACA,OAAO,eAAeQ,MAAMA,CAAC;EAACC,OAAO;EAACC;AAAM,CAAC,EAAC;EAC1C;EACA,MAAMC,IAAI,GAAC,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC;EACnC;EACA,MAAMC,UAAU,GAAC;IACbC,KAAK,EAACH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACvBC,IAAI,EAACL,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACrBE,WAAW,EAACN,IAAI,CAACI,GAAG,CAAC,aAAa,CAAC;IACnCG,KAAK,EAACP,IAAI,CAACI,GAAG,CAAC,OAAO;EAC1B,CAAC;EACDI,OAAO,CAACC,GAAG,CAACP,UAAU,CAAC;EAEvB,MAAMQ,QAAQ,GAAC,MAAMC,KAAK,CAAC,8BAA8B,EAAC;IACtDrB,MAAM,EAAE,MAAM;IACdsB,OAAO,EAAC;MACJ,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,UAAU;EACnC,CAAC,CAAC;;EAGF;EACA;EACA;EACE,IAAGQ,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAC;IACzB,OAAON,QAAQ;EACjB;EAEF,IAAG,CAACA,QAAQ,CAACO,EAAE,EAAC;IACZ;IACA,MAAMjC,IAAI,CAAC;MACPgC,MAAM,EAAC,GAAG;MACVE,OAAO,EAAC;IACZ,CAAC,CAAC;EACN,CAAC,MACG;IACA;IACA;IACD,OAAOjC,QAAQ,CAAC,SAAS,CAAC;EAC7B;AACJ;AAAC,IAAAW,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}