{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\routing3\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\";\nimport { useEffect, useState } from 'react';\nimport EventsList from '../components/EventsList';\n\n// Utilizing router specific loader and useLoaderData for http\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 25\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), !isLoading && fetchedEvents && /*#__PURE__*/_jsxDEV(EventsList, {\n      events: fetchedEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true);\n}\n_c = EventsPage;\nexport default EventsPage;\n\n// normal method of loading a  component AND fetching hhtp with useEffect \n\n// function EventsPage() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [fetchedEvents, setFetchedEvents] = useState();\n//   const [error, setError] = useState();\n\n//   useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n//       const response = await fetch('http://localhost:8080/events');\n\n//       if (!response.ok) {\n//         setError('Fetching events failed.');\n//       } else {\n//         const resData = await response.json();\n//         setFetchedEvents(resData.events);\n//       }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\n//   return (\n//     <>\n//       <div style={{ textAlign: 'center' }}>\n//         {isLoading && <p>Loading...</p>}\n//         {error && <p>{error}</p>}\n//       </div>\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n//     </>\n//   );\n// }\n\n// export default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","children","style","textAlign","isLoading","fileName","_jsxFileName","lineNumber","columnNumber","error","fetchedEvents","events","_c","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/routing3/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\n\r\n// Utilizing router specific loader and useLoaderData for http\r\nfunction EventsPage() {\r\n \r\n  \r\n  \r\n    return (\r\n      <>\r\n        <div style={{ textAlign: 'center' }}>\r\n          {isLoading && <p>Loading...</p>}\r\n          {error && <p>{error}</p>}\r\n        </div>\r\n        {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default EventsPage;\r\n\r\n\r\n// normal method of loading a  component AND fetching hhtp with useEffect \r\n\r\n// function EventsPage() {\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [fetchedEvents, setFetchedEvents] = useState();\r\n//   const [error, setError] = useState();\r\n\r\n//   useEffect(() => {\r\n//     async function fetchEvents() {\r\n//       setIsLoading(true);\r\n//       const response = await fetch('http://localhost:8080/events');\r\n\r\n//       if (!response.ok) {\r\n//         setError('Fetching events failed.');\r\n//       } else {\r\n//         const resData = await response.json();\r\n//         setFetchedEvents(resData.events);\r\n//       }\r\n//       setIsLoading(false);\r\n//     }\r\n\r\n//     fetchEvents();\r\n//   }, []);\r\n//   return (\r\n//     <>\r\n//       <div style={{ textAlign: 'center' }}>\r\n//         {isLoading && <p>Loading...</p>}\r\n//         {error && <p>{error}</p>}\r\n//       </div>\r\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default EventsPage;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,UAAU,MAAM,0BAA0B;;AAGjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,UAAUA,CAAA,EAAG;EAIlB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACEJ,OAAA;MAAKK,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,GACjCG,SAAS,iBAAIP,OAAA;QAAAI,QAAA,EAAG;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAC9BC,KAAK,iBAAIZ,OAAA;QAAAI,QAAA,EAAIQ;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,EACL,CAACJ,SAAS,IAAIM,aAAa,iBAAIb,OAAA,CAACF,UAAU;MAACgB,MAAM,EAAED;IAAc;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACrE,CAAC;AAEP;AAACI,EAAA,GAbMZ,UAAU;AAejB,eAAeA,UAAU;;AAG3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}