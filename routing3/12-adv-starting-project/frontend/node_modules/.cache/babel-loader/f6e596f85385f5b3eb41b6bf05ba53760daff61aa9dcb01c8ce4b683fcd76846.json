{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\routing3\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport EventsList from '../components/EventsList';\n\n// Utilizing router specific loader and useLoaderData for http\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchedEvents, setFetchedEvents] = useState();\n  const [error, setError] = useState();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 25\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), !isLoading && fetchedEvents && /*#__PURE__*/_jsxDEV(EventsList, {\n      events: fetchedEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true);\n}\n_s(EventsPage, \"BktPDlZeNxxMMrgJx28KlDCvnhk=\");\n_c = EventsPage;\nexport default EventsPage;\n\n// normal method of loading a  component AND fetching hhtp with useEffect \n\n// function EventsPage() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [fetchedEvents, setFetchedEvents] = useState();\n//   const [error, setError] = useState();\n\n//   useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n//       const response = await fetch('http://localhost:8080/events');\n\n//       if (!response.ok) {\n//         setError('Fetching events failed.');\n//       } else {\n//         const resData = await response.json();\n//         setFetchedEvents(resData.events);\n//       }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\n//   return (\n//     <>\n//       <div style={{ textAlign: 'center' }}>\n//         {isLoading && <p>Loading...</p>}\n//         {error && <p>{error}</p>}\n//       </div>\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n//     </>\n//   );\n// }\n\n// export default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","isLoading","setIsLoading","fetchedEvents","setFetchedEvents","error","setError","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/routing3/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\n\r\n// Utilizing router specific loader and useLoaderData for http\r\nfunction EventsPage() {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [fetchedEvents, setFetchedEvents] = useState();\r\n    const [error, setError] = useState();\r\n  \r\n  \r\n    return (\r\n      <>\r\n        <div style={{ textAlign: 'center' }}>\r\n          {isLoading && <p>Loading...</p>}\r\n          {error && <p>{error}</p>}\r\n        </div>\r\n        {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default EventsPage;\r\n\r\n\r\n// normal method of loading a  component AND fetching hhtp with useEffect \r\n\r\n// function EventsPage() {\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [fetchedEvents, setFetchedEvents] = useState();\r\n//   const [error, setError] = useState();\r\n\r\n//   useEffect(() => {\r\n//     async function fetchEvents() {\r\n//       setIsLoading(true);\r\n//       const response = await fetch('http://localhost:8080/events');\r\n\r\n//       if (!response.ok) {\r\n//         setError('Fetching events failed.');\r\n//       } else {\r\n//         const resData = await response.json();\r\n//         setFetchedEvents(resData.events);\r\n//       }\r\n//       setIsLoading(false);\r\n//     }\r\n\r\n//     fetchEvents();\r\n//   }, []);\r\n//   return (\r\n//     <>\r\n//       <div style={{ textAlign: 'center' }}>\r\n//         {isLoading && <p>Loading...</p>}\r\n//         {error && <p>{error}</p>}\r\n//       </div>\r\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default EventsPage;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,UAAU,MAAM,0BAA0B;;AAGjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,CAAC;EACpD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC;EAGpC,oBACEG,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACEX,OAAA;MAAKY,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,GACjCN,SAAS,iBAAIL,OAAA;QAAAW,QAAA,EAAG;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAC9BR,KAAK,iBAAIT,OAAA;QAAAW,QAAA,EAAIF;MAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,EACL,CAACZ,SAAS,IAAIE,aAAa,iBAAIP,OAAA,CAACF,UAAU;MAACoB,MAAM,EAAEX;IAAc;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACrE,CAAC;AAEP;AAACb,EAAA,CAfMD,UAAU;AAAAgB,EAAA,GAAVhB,UAAU;AAiBjB,eAAeA,UAAU;;AAG3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}