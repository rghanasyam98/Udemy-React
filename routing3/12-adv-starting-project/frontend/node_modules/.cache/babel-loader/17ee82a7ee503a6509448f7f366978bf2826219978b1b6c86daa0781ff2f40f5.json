{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\routing3\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport EventsList from '../components/EventsList';\nimport { json, useLoaderData, useRouteLoaderData } from 'react-router-dom';\n\n// Utilizing router specific loader and useLoaderData for http\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  // in case of returned the json parsed events\n  // const events=useLoaderData();\n\n  // loader feature automatically parse json we dont have to\n\n  // const data=useLoaderData();\n\n  const data = useRouteLoaderData('event-detail');\n  console.log(\"***\", data);\n\n  // rendering error related component \n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 8\n  }, this);\n}\n_s(EventsPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n\n// the loader fn can be placed here and a pointer can be used at loader :\nexport const EventsLoader = async () => {\n  //loader defines the action to be performed before rendering eventspage\n  // const response = await fetch('http://localhost:8080/qevents');//url to show error\n\n  // correct url\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //dealing error\n    //method 1\n    //  return {isError: true,message:'fetching failed'};\n\n    // method 2\n    // wile throws an error automatically renders errorElement specified in router definition\n    //in this case passed error data cant be fetched\n    // throw {message:'fetching failed'};\n\n    // method 3\n    // to fetch passed error data use this method\n    // throw new Response(JSON.stringify({\n    //   message:\"fetching failed Response\",\n    //   status:500\n    // }));\n\n    // method 4\n    // this method doesnt needs json parsing in other end\n    throw json({\n      message: \"Fetching failed json\",\n      status: 500\n    });\n  } else {\n    //  const resData = await response.json();\n    //  return resData.events;\n\n    // in case of using loader we only need to return response . the json parsing is done by useLoaderData automatically\n    return response;\n  }\n};\n\n// normal method of loading a  component AND fetching hhtp with useEffect \n\n// function EventsPage() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [fetchedEvents, setFetchedEvents] = useState();\n//   const [error, setError] = useState();\n\n//   useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n//       const response = await fetch('http://localhost:8080/events');\n\n//       if (!response.ok) {\n//         setError('Fetching events failed.');\n//       } else {\n//         const resData = await response.json();\n//         setFetchedEvents(resData.events);\n//       }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\n//   return (\n//     <>\n//       <div style={{ textAlign: 'center' }}>\n//         {isLoading && <p>Loading...</p>}\n//         {error && <p>{error}</p>}\n//       </div>\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n//     </>\n//   );\n// }\n\n// export default EventsPage;\n_c2 = EventsLoader;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventsPage\");\n$RefreshReg$(_c2, \"EventsLoader\");","map":{"version":3,"names":["useEffect","useState","EventsList","json","useLoaderData","useRouteLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","data","console","log","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","EventsLoader","response","fetch","ok","status","_c2","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/routing3/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport EventsList from '../components/EventsList';\r\nimport { json, useLoaderData,useRouteLoaderData } from 'react-router-dom';\r\n\r\n// Utilizing router specific loader and useLoaderData for http\r\nfunction EventsPage() {\r\n \r\n  // in case of returned the json parsed events\r\n  // const events=useLoaderData();\r\n\r\n  // loader feature automatically parse json we dont have to\r\n  \r\n  // const data=useLoaderData();\r\n\r\n  const data=useRouteLoaderData('event-detail');\r\n  console.log(\"***\", data);\r\n\r\n  // rendering error related component \r\n  if(data.isError){\r\n    return(\r\n      <p>{data.message}</p>\r\n    )\r\n  }\r\n\r\n  const events=data.events;\r\n\r\n  \r\n    return (\r\n  \r\n        \r\n       <EventsList events={events} />\r\n \r\n    );\r\n\r\n  }\r\n  \r\n  export default EventsPage;\r\n\r\n// the loader fn can be placed here and a pointer can be used at loader :\r\nexport const EventsLoader=async()=>{\r\n    //loader defines the action to be performed before rendering eventspage\r\n        // const response = await fetch('http://localhost:8080/qevents');//url to show error\r\n        \r\n        // correct url\r\n        const response = await fetch('http://localhost:8080/events');\r\n\r\n        if (!response.ok) {\r\n         //dealing error\r\n         //method 1\r\n        //  return {isError: true,message:'fetching failed'};\r\n\r\n        // method 2\r\n        // wile throws an error automatically renders errorElement specified in router definition\r\n        //in this case passed error data cant be fetched\r\n        // throw {message:'fetching failed'};\r\n\r\n        // method 3\r\n        // to fetch passed error data use this method\r\n        // throw new Response(JSON.stringify({\r\n        //   message:\"fetching failed Response\",\r\n        //   status:500\r\n        // }));\r\n\r\n        // method 4\r\n        // this method doesnt needs json parsing in other end\r\n        throw json({\r\n          message:\"Fetching failed json\",\r\n          status:500\r\n        });\r\n\r\n\r\n\r\n       } else {\r\n        //  const resData = await response.json();\r\n        //  return resData.events;\r\n\r\n        // in case of using loader we only need to return response . the json parsing is done by useLoaderData automatically\r\n        return response;\r\n         }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// normal method of loading a  component AND fetching hhtp with useEffect \r\n\r\n// function EventsPage() {\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [fetchedEvents, setFetchedEvents] = useState();\r\n//   const [error, setError] = useState();\r\n\r\n//   useEffect(() => {\r\n//     async function fetchEvents() {\r\n//       setIsLoading(true);\r\n//       const response = await fetch('http://localhost:8080/events');\r\n\r\n//       if (!response.ok) {\r\n//         setError('Fetching events failed.');\r\n//       } else {\r\n//         const resData = await response.json();\r\n//         setFetchedEvents(resData.events);\r\n//       }\r\n//       setIsLoading(false);\r\n//     }\r\n\r\n//     fetchEvents();\r\n//   }, []);\r\n//   return (\r\n//     <>\r\n//       <div style={{ textAlign: 'center' }}>\r\n//         {isLoading && <p>Loading...</p>}\r\n//         {error && <p>{error}</p>}\r\n//       </div>\r\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default EventsPage;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,EAAEC,aAAa,EAACC,kBAAkB,QAAQ,kBAAkB;;AAEzE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEpB;EACA;;EAEA;;EAEA;;EAEA,MAAMC,IAAI,GAACL,kBAAkB,CAAC,cAAc,CAAC;EAC7CM,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,IAAI,CAAC;;EAExB;EACA,IAAGA,IAAI,CAACG,OAAO,EAAC;IACd,oBACEN,OAAA;MAAAO,QAAA,EAAIJ,IAAI,CAACK;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAEzB;EAEA,MAAMC,MAAM,GAACV,IAAI,CAACU,MAAM;EAGtB,oBAGGb,OAAA,CAACL,UAAU;IAACkB,MAAM,EAAEA;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAInC;AAACV,EAAA,CA7BMD,UAAU;EAAA,QASNH,kBAAkB;AAAA;AAAAgB,EAAA,GATtBb,UAAU;AA+BjB,eAAeA,UAAU;;AAE3B;AACA,OAAO,MAAMc,YAAY,GAAC,MAAAA,CAAA,KAAS;EAC/B;EACI;;EAEA;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACjB;IACA;IACD;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA,MAAMtB,IAAI,CAAC;MACTY,OAAO,EAAC,sBAAsB;MAC9BW,MAAM,EAAC;IACT,CAAC,CAAC;EAIH,CAAC,MAAM;IACN;IACA;;IAEA;IACA,OAAOH,QAAQ;EACd;AAET,CAAC;;AAcD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAI,GAAA,GAzFaL,YAAY;AAAA,IAAAD,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}