{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online course projects\\\\udemy react\\\\authentication_project\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  // cant use useSeachParams() hook for getting the query parameters inside a action fn\n  // so we need another method given below\n  const mode = new URL(request.url).searchParams.get('mode') || 'login';\n  console.log(mode);\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({\n      message: 'unsupported mode',\n      status: 422\n    });\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n  console.log(authData);\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n  console.log(response);\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Authentication failed\",\n      status: 500\n    });\n  }\n\n  // authentication successful\n  // successful authentication returns token\n  const response_data = await response.json();\n  const token = response_data.token;\n  localStorage.setItem('token', token);\n\n  // also storing an expiry field for this token by the current time  + 1 hr as expiry\n  const expiration = new Date();\n  return redirect('/');\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","mode","URL","url","searchParams","get","console","log","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","ok","response_data","token","localStorage","setItem","expiration","Date","$RefreshReg$"],"sources":["D:/Online course projects/udemy react/authentication_project/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({request}){\n  // cant use useSeachParams() hook for getting the query parameters inside a action fn\n  // so we need another method given below\n  const mode=new URL(request.url).searchParams.get('mode') || 'login';\n  console.log(mode);\n  if(mode !== 'login' && mode !== 'signup'){\n    throw json({\n      message:'unsupported mode',\n      status:422\n    });\n  }\n  const data=await request.formData();\n  const authData={\n    email:data.get('email'),\n    password:data.get('password'),\n  }\n  console.log(authData);\n\n\n  const response = await fetch('http://localhost:8080/'+mode,{\n    method: 'POST',\n    headers:{'Content-Type': 'application/json'},\n    body: JSON.stringify(authData)\n  })\n  \n  console.log(response);\n\n  if(response.status === 422 || response.status === 401){\n    return response;\n  }\n\n\n  if(!response.ok){\n    throw json({\n      message:\"Authentication failed\",\n      status:500\n    })\n  }\n\n  // authentication successful\n  // successful authentication returns token\n  const response_data=await response.json();\n  const token=response_data.token;\n  localStorage.setItem('token', token);\n\n  // also storing an expiry field for this token by the current time  + 1 hr as expiry\n  const expiration=new Date()\n  return redirect('/');\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAC;EACrC;EACA;EACA,MAAMC,IAAI,GAAC,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACC,YAAY,CAACC,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;EACnEC,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;EACjB,IAAGA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAC;IACvC,MAAMb,IAAI,CAAC;MACToB,OAAO,EAAC,kBAAkB;MAC1BC,MAAM,EAAC;IACT,CAAC,CAAC;EACJ;EACA,MAAMC,IAAI,GAAC,MAAMV,OAAO,CAACW,QAAQ,CAAC,CAAC;EACnC,MAAMC,QAAQ,GAAC;IACbC,KAAK,EAACH,IAAI,CAACL,GAAG,CAAC,OAAO,CAAC;IACvBS,QAAQ,EAACJ,IAAI,CAACL,GAAG,CAAC,UAAU;EAC9B,CAAC;EACDC,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;EAGrB,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAACf,IAAI,EAAC;IACzDgB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAC;MAAC,cAAc,EAAE;IAAkB,CAAC;IAC5CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAC/B,CAAC,CAAC;EAEFN,OAAO,CAACC,GAAG,CAACQ,QAAQ,CAAC;EAErB,IAAGA,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAC;IACpD,OAAOM,QAAQ;EACjB;EAGA,IAAG,CAACA,QAAQ,CAACO,EAAE,EAAC;IACd,MAAMlC,IAAI,CAAC;MACToB,OAAO,EAAC,uBAAuB;MAC/BC,MAAM,EAAC;IACT,CAAC,CAAC;EACJ;;EAEA;EACA;EACA,MAAMc,aAAa,GAAC,MAAMR,QAAQ,CAAC3B,IAAI,CAAC,CAAC;EACzC,MAAMoC,KAAK,GAACD,aAAa,CAACC,KAAK;EAC/BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;;EAEpC;EACA,MAAMG,UAAU,GAAC,IAAIC,IAAI,CAAC,CAAC;EAC3B,OAAOvC,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAS,EAAA;AAAA+B,YAAA,CAAA/B,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}